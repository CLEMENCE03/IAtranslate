# -*- coding: utf-8 -*-
import tkinter as tk
from tkinter import ttk
from googletrans import Translator
import pyttsx3

def translator(text, target_language='en'):
    translator = Translator()
    translation = translator.translate(text, dest=target_language)
    return translation.text

def speak_text(text, language='en'):
    # Initialize the text-to-speech engine
    engine = pyttsx3.init()

    # Set properties (optional)
    engine.setProperty('rate', 150)  # Speed of speech
    engine.setProperty('volume', 1.0)  # Volume level (0.0 to 1.0)

    # Set the voice based on the language
    voices = engine.getProperty('voices')

    if voices:
        # Some voices are not associated with any language
        for voice in voices:
            if hasattr(voice, 'languages') and voice.languages:
                if language.lower() in voice.languages[0].lower():
                    engine.setProperty('voice', voice.id)
                    break

    # Speak the text
    engine.say(text)

    # Wait for the speech to finish
    engine.runAndWait()


def on_translate():
    text_to_translate = text_entry.get()
    target_language = target_language_var.get()
    target_language_code = [code for code, language in LANGUAGES.items() if language == target_language][0]
    
    result = translator(text_to_translate, target_language_code)
    
    translation_result.config(text=f"Translation: {result}")

    speak_button.config(state=tk.NORMAL)  # Enable the Speak button

def on_speak():
    text_to_speak = translation_result.cget("text").split(": ")[1]
    target_language = target_language_var.get()
    target_language_code = [code for code, language in LANGUAGES.items() if language == target_language][0]

    speak_text(text_to_speak, language=target_language_code)

if __name__ == "__main__":
    LANGUAGES = {
        'af': 'Afrikaans', 'sq': 'Albanian', 'am': 'Amharic', 'ar': 'Arabic', 'hy': 'Armenian', 'az': 'Azerbaijani',
        'eu': 'Basque', 'be': 'Belarusian', 'bn': 'Bengali', 'bs': 'Bosnian', 'bg': 'Bulgarian', 'ca': 'Catalan',
        'ceb': 'Cebuano', 'ny': 'Chichewa', 'zh-cn': 'Chinese (Simplified)', 'zh-tw': 'Chinese (Traditional)',
        'co': 'Corsican', 'hr': 'Croatian', 'cs': 'Czech', 'da': 'Danish', 'nl': 'Dutch', 'en': 'English',
        'eo': 'Esperanto', 'et': 'Estonian', 'tl': 'Filipino', 'fi': 'Finnish', 'fr': 'French', 'fy': 'Frisian',
        'gl': 'Galician', 'ka': 'Georgian', 'de': 'German', 'el': 'Greek', 'gu': 'Gujarati', 'ht': 'Haitian Creole',
        'ha': 'Hausa', 'haw': 'Hawaiian', 'iw': 'Hebrew', 'he': 'Hebrew', 'hi': 'Hindi', 'hmn': 'Hmong',
        'hu': 'Hungarian', 'is': 'Icelandic', 'ig': 'Igbo', 'id': 'Indonesian', 'ga': 'Irish', 'it': 'Italian',
        'ja': 'Japanese', 'jw': 'Javanese', 'kn': 'Kannada', 'kk': 'Kazakh', 'km': 'Khmer', 'ko': 'Korean',
        'ku': 'Kurdish (Kurmanji)', 'ky': 'Kyrgyz', 'lo': 'Lao', 'la': 'Latin', 'lv': 'Latvian', 'lt': 'Lithuanian',
        'lb': 'Luxembourgish', 'mk': 'Macedonian', 'mg': 'Malagasy', 'ms': 'Malay', 'ml': 'Malayalam', 'mt': 'Maltese',
        'mi': 'Maori', 'mr': 'Marathi', 'mn': 'Mongolian', 'my': 'Burmese', 'ne': 'Nepali', 'no': 'Norwegian',
        'or': 'Odia (Oriya)', 'ps': 'Pashto', 'fa': 'Persian', 'pl': 'Polish', 'pt': 'Portuguese', 'pa': 'Punjabi',
        'ro': 'Romanian', 'ru': 'Russian', 'sm': 'Samoan', 'gd': 'Scots Gaelic', 'sr': 'Serbian', 'st': 'Sesotho',
        'sn': 'Shona', 'sd': 'Sindhi', 'si': 'Sinhala', 'sk': 'Slovak', 'sl': 'Slovenian', 'so': 'Somali',
        'es': 'Spanish', 'su': 'Sundanese', 'sw': 'Swahili', 'sv': 'Swedish', 'tg': 'Tajik', 'ta': 'Tamil',
        'te': 'Telugu', 'th': 'Thai', 'tr': 'Turkish', 'uk': 'Ukrainian', 'ur': 'Urdu', 'ug': 'Uyghur', 'uz': 'Uzbek',
        'vi': 'Vietnamese', 'cy': 'Welsh', 'xh': 'Xhosa', 'yi': 'Yiddish', 'yo': 'Yoruba', 'zu': 'Zulu'
    }

    root = tk.Tk()
    root.title("Translator with Voice")

    # Add a label and an entry for text input
    text_label = tk.Label(root, text="Enter the text to translate:")
    text_label.pack(pady=10)

    text_entry = tk.Entry(root, width=40)
    text_entry.pack(pady=10)

    # Add a dropdown menu for selecting the target language
    target_language_label = tk.Label(root, text="Select the target language:")
    target_language_label.pack(pady=10)

    target_language_var = tk.StringVar(root)
    target_language_var.set(list(LANGUAGES.values())[0])
    target_language_menu = ttk.Combobox(root, textvariable=target_language_var, values=list(LANGUAGES.values()))
    target_language_menu.pack(pady=10)

    # Add a button to trigger translation
    translate_button = tk.Button(root, text="Translate", command=on_translate)
    translate_button.pack(pady=20)

    # Add a label to display the translation result
    translation_result = tk.Label(root, text="Translation:")
    translation_result.pack(pady=10)
    
    # Add a button to speak the translated text
    speak_button = tk.Button(root, text="Speak", command=on_speak, state=tk.DISABLED)
    speak_button.pack(pady=20)
    
    root.mainloop()
